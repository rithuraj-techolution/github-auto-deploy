"""docstring"""
from openai import AzureOpenAI
from config import Config


def get_dynamic_prompts(flow: str):
    """
    Generate dynamic prompts based on the specified flow.

    Parameters:
    - flow (str): The flow type, either "feedback_for_refactorcode" or "feedback_for_unittest".

    Returns:
    - tuple: A tuple containing the system prompt, main user prompt, and keywords for the specified flow.
    """

    if flow == "feedback_for_refactorcode":
        system_prompt = "You are an AI assistant specialized in enhancing refactored C# code code(.net version 4.7.2 and C# version 7.3) based on user feedback. Ensure that all original imports, namespaces, directives and comment summary blocks from the provided initial refactored code are preserved in your refactored solution. These elements are crucial to the code's operation and should remain unchanged unless explicitly instructed to modify them."
        main_user_prompt = """Task: Based on the above original code, initial refactored code, and feedback, provide further improvements and enhancements to the refactored code.Ensure that all original imports, namespaces, directives and comment summary blocks from the provided initial refactored code are preserved in your refactored solution. These elements are crucial to the code's operation and should remain unchanged unless explicitly instructed to modify them.
        Constraints:
        The enhanced refactored code should:
        - Ensure that the modifications adhere strictly to the feedback provided.
        - Do not remove or alter any import statements.
        - Optimize for readability, performance, and maintainability
        - Apply appropriate design patterns and principles
        - Follow best practices for code quality and style
        - Use try-catch blocks effectively and avoid generic exceptions and Implement logging for critical parts of the application for easier debugging and monitoring.
        - Follow security best practices to protect data and prevent vulnerabilities.
        - Provide explanatory comments for each and every line of code.
        <CAUTION>:
        - The libraries included in the original code are not meant to be altered. because it jeopardizes the code's overall logical flow.
        - You are not allowed to remove existing libraries, directives and namespaces.
        - You are not allowed to remove existing comment summary blocks.
        - Ensure that the generated code remains compatible with .NET version 4.7.2 and C# version 7.3.
        <IMPORTANT>: Only Provide the refactored code starting from ```csharp and ending with ```.
        <IMPORTANT>: Only make changes mentioned in the feedback."""

        keywords = ["Orignal code", "Initial refactored code", "Feedback on refactored code "]

    elif flow == "feedback_for_unittest":
        system_prompt = "You are an AI assistant specialized in enhancing the C# unit test cases using the generated initial test cases as a reference."
        main_user_prompt = """ Based on the above C# code, initial generated test cases, and feedback, provide improved and enhanced test cases that increase code coverage and address any issues mentioned in the feedback in MSTest version 4.7.2.

            The enhanced test cases should:

            - Expand on the initial test cases to cover more code paths and edge cases
            - Add negative test cases to check for incorrect handling of bad inputs
            - Include more parameterized tests with different inputs
            - Target any specific sections called out in the feedback
            - Follow best practices for unit testing with MSTest
            - Provide explanatory comments where applicable.
            - Prioritization of logic verification and error prevention techniques.
            - Leverage MSTest features like TestMethod, TestInitialize, TestCleanup, and DataRow for efficient test case organization and execution.

            <IMPORTANT>: Only Give us test cases Code Starting from ```csharp and ends with ```.
            <CAUTION>: Make sure the generated test cases is error free.
            """

        keywords = ["C# code", "Initial generated test cases", "Feedback on test cases" ]
    return system_prompt, main_user_prompt, keywords

def generate_enhanced_response(flow, cs_code, test_code, line_comment_list):
    """
    Generate an enhanced response using the specified flow, C# code, test code, and line comments.

    Parameters:
    - flow (str): The flow type, either "feedback_for_refactorcode" or "feedback_for_unittest".
    - cs_code (str): The C# code to be processed.
    - test_code (str): The test code to be processed.
    - line_comment_list (dict): A dictionary mapping line numbers to comments for user-provided feedback.

    Returns:
    - str: The enhanced response generated by the Azure OpenAI model.
    """

    if flow == "feedback_for_refactorcode":
        system_prompt, main_user_prompt, keywords = get_dynamic_prompts(flow)
    elif flow == "feedback_for_unittest":
        system_prompt, main_user_prompt, keywords = get_dynamic_prompts(flow)
    else:
        return ""

    # creating the conversation

    conversation = [
        {
            "role": "system",
            "content": system_prompt
        },
        {
            "role": "user",
            "content": f"""
                {keywords[0]}:
                  {cs_code}

                {keywords[1]}:
                {test_code}

                {keywords[2]}:
                """
        },
    ]
    for line, comment in line_comment_list:
        conversation.append({
            "role": "user",
            "content": f"{line}: {comment}"
        })

    conversation.append({
        "role": "user",
        "content": main_user_prompt
     })


    try:
        client = AzureOpenAI(
            azure_endpoint=Config.AZURE_OPENAI_ENDPOINT,
            api_key=Config.AZURE_OPENAI_API_KEY,
            api_version=Config.AZURE_API_VERSION
        )

        response = client.chat.completions.create(
            model="gpt-4o",
            temperature=0.2,
            max_tokens=4096,
            messages=conversation
        )

        return response.choices[0].message.content
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        return None


# This will take the code and check the errors and syntax errors.
def error_to_message(error):
    """docstring"""
    try:
        conversation = [
            {
                "role": "system",
                "content": "You are expert in C# Language and it's MS Build Issues. You will recieve the Build Error and you are expected to return a 2 line feedback message explaining the error.",
            },
            {
                "role": "user",
                "content": f"I am trying to use ms build command on my C# Provide. This is the error from the logs: {error}. Provide me a small feedback explaining the error and make sure to not miss any information in it."
            },
        ]

        client = AzureOpenAI(
            azure_endpoint = Config.AZURE_OPENAI_ENDPOINT, 
            api_key=Config.AZURE_OPENAI_API_KEY,  
            api_version=Config.AZURE_API_VERSION
        )
        response = client.chat.completions.create(
            model="gpt-4o",
            temperature=0,
            max_tokens=4000,
            messages=conversation
        )
        return response.choices[0].message.content
    except Exception as e:
        # logger.exception(f"Error resp: {str(e)}")
        print(f"An error occurred during error_to_message generation: {str(e)}")
        return {'message': str(e)}, 500
